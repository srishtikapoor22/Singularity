import torch
from models.mlp import MLP
from torch.nn import nn
from utils.activations import ActivationRecorder

def _first_linear_layer_name(model: nn.Module) -> str:
    # Find a deterministic Linear layer name to assert on
    for name, module in model.named_modules():
        if isinstance(module, nn.Linear) and name != "":
            return name
    raise RuntimeError("No nn.Linear layer found in model.")\

def capture_outputs():
    model=MLP(input_dim=2, hidden_dims=[3], output_dim=1)
    recorder=ActivationRecorder(model)
    if hasattr(recorder,"start"):
        recorder.start()
    
    x=torch.randn(5,2)
    _=model(x)

    assert len(recorder.activations)>0
    linear_name=_first_linear_layer_name(model)
    assert linear_name in recorder.activations
    act=recorder.activations[linear_name]
    assert acr.shape[0]==5

    out_features=dict(
        (name, m.out_features) for name, m in model.named_modules() if isinstance(m, nn.Linear)
    )[linear_name]
    assert act.shape[1]==out_features

    if hasattr(recorder,"stop"):
        recorder.stop()